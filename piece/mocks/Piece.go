// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	piece "github.com/afjoseph/totorrent/piece"
	mock "github.com/stretchr/testify/mock"
)

// Piece is an autogenerated mock type for the Piece type
type Piece struct {
	mock.Mock
}

// Downloaded provides a mock function with given fields:
func (_m *Piece) Downloaded() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetBlocks provides a mock function with given fields:
func (_m *Piece) GetBlocks() []*piece.Block {
	ret := _m.Called()

	var r0 []*piece.Block
	if rf, ok := ret.Get(0).(func() []*piece.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*piece.Block)
		}
	}

	return r0
}

// GetDownloader provides a mock function with given fields:
func (_m *Piece) GetDownloader() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetIdx provides a mock function with given fields:
func (_m *Piece) GetIdx() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetLength provides a mock function with given fields:
func (_m *Piece) GetLength() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetStatus provides a mock function with given fields:
func (_m *Piece) GetStatus() piece.PieceStatus {
	ret := _m.Called()

	var r0 piece.PieceStatus
	if rf, ok := ret.Get(0).(func() piece.PieceStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(piece.PieceStatus)
	}

	return r0
}

// SetDownloader provides a mock function with given fields: _a0
func (_m *Piece) SetDownloader(_a0 string) {
	_m.Called(_a0)
}

// SetStatus provides a mock function with given fields: _a0
func (_m *Piece) SetStatus(_a0 piece.PieceStatus) {
	_m.Called(_a0)
}
