// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	piece "github.com/afjoseph/totorrent/piece"
	mock "github.com/stretchr/testify/mock"
)

// SafePieces is an autogenerated mock type for the SafePieces type
type SafePieces struct {
	mock.Mock
}

// Data provides a mock function with given fields:
func (_m *SafePieces) Data() map[int]piece.Piece {
	ret := _m.Called()

	var r0 map[int]piece.Piece
	if rf, ok := ret.Get(0).(func() map[int]piece.Piece); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]piece.Piece)
		}
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *SafePieces) Get(_a0 int) piece.Piece {
	ret := _m.Called(_a0)

	var r0 piece.Piece
	if rf, ok := ret.Get(0).(func(int) piece.Piece); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(piece.Piece)
		}
	}

	return r0
}

// Len provides a mock function with given fields:
func (_m *SafePieces) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Put provides a mock function with given fields: _a0
func (_m *SafePieces) Put(_a0 piece.Piece) {
	_m.Called(_a0)
}

// TryToReserve provides a mock function with given fields: _a0, _a1
func (_m *SafePieces) TryToReserve(_a0 int, _a1 string) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
